# -*- coding: utf-8 -*-
"""credit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1LOccKDTwdDUR46gDIbzOLVdYGF1eK_
"""

# Installing libraries
!pip install numpy pandas scikit-learn imbalanced-learn tensorflow

# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import tensorflow as tf
from tensorflow.keras import layers, models

# Loading and preprocessing the dataset
# Load the dataset (replace 'data.csv' with your dataset filename)
data = pd.read_csv('data.csv')

# Split the data into features (X) and labels (y)
X = data.drop('fraud_label', axis=1)
y = data['fraud_label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Perform oversampling on the training data
oversampler = RandomOverSampler()
X_train_resampled, y_train_resampled = oversampler.fit_resample(X_train, y_train)

# Perform undersampling on the training data
undersampler = RandomUnderSampler()
X_train_resampled, y_train_resampled = undersampler.fit_resample(X_train_resampled, y_train_resampled)

# Training the model

# Initialize and train the logistic regression model
logreg_model = LogisticRegression()
logreg_model.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred_logreg = logreg_model.predict(X_test)

# Evaluate the model
accuracy_logreg = accuracy_score(y_test, y_pred_logreg)
confusion_matrix_logreg = confusion_matrix(y_test, y_pred_logreg)
classification_report_logreg = classification_report(y_test, y_pred_logreg)

print("Logistic Regression Model:")
print("Accuracy:", accuracy_logreg)
print("Confusion Matrix:\n", confusion_matrix_logreg)
print("Classification Report:\n", classification_report_logreg)

# Train and evaluate deep neural network model

# Initialize and train the deep neural network model
nn_model = MLPClassifier(hidden_layer_sizes=(128, 64), activation='relu', max_iter=100)
nn_model.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred_nn = nn_model.predict(X_test)

# Evaluate the model
accuracy_nn = accuracy_score(y_test, y_pred_nn)
confusion_matrix_nn = confusion_matrix(y_test, y_pred_nn)
classification_report_nn = classification_report(y_test, y_pred_nn)

print("Deep Neural Network Model:")
print("Accuracy:", accuracy_nn)
print("Confusion Matrix:\n", confusion_matrix_nn)
print("Classification Report:\n", classification_report_nn)

# Train and evaluate the autoencoder for anomaly detection

# Define the architecture of the autoencoder
input_dim = X_train_resampled.shape[1]
encoding_dim = 32

autoencoder = models.Sequential([
    layers.Dense(128, activation='relu', input_shape=(input_dim,)),
    layers.Dense(encoding_dim, activation='relu'),
    layers.Dense(128, activation='relu'),
    layers.Dense(input_dim, activation='sigmoid')
])

# Compile the autoencoder
autoencoder.compile(optimizer='adam', loss='mean_squared_error')

# Train the autoencoder on the training data
autoencoder.fit(X_train_resampled, X_train_resampled, epochs=100, batch_size=32, shuffle=True, validation_split=0.2)

# Reconstruct the test data using the autoencoder
X_test_reconstructed = autoencoder.predict(X_test)

# Calculate the reconstruction error for each sample
reconstruction_errors = np.mean(np.square(X_test_reconstructed - X_test), axis=1)

# Set a threshold for anomaly detection (you can experiment with different values)
threshold = 0.01

# Predict fraud based on the reconstruction error
y_pred_autoencoder = [1 if error > threshold else 0 for error in reconstruction_errors]

# Evaluate the autoencoder model
accuracy_autoencoder = accuracy_score(y_test, y_pred_autoencoder)
confusion_matrix_autoencoder = confusion_matrix(y_test, y_pred_autoencoder)
classification_report_autoencoder = classification_report(y_test, y_pred_autoencoder)

print("Autoencoder Model for Anomaly Detection:")
print("Accuracy:", accuracy_autoencoder)
print("Confusion Matrix:\n", confusion_matrix_autoencoder)
print("Classification Report:\n", classification_report_autoencoder)
